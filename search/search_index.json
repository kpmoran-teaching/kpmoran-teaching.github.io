{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Course Description This course will provide a comprehensive introduction to web app development, covering JavaScript, back end development, front end development, and user interface design. Welcome Video .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } General Course Information Faculty Teaching Assistant Instructor: Dr. Kevin Moran Office: Nguyen Engineering Building 4448 Email: kpmoran(at)gmu.edu (Hybrid) Office Hours: Monday 1:00pm-2:00pm, Wednesday, 1:00pm-2:00pm or by appointment Join Office Hours Instructor: David Gonzalez Samudio Office: Nguyen Engineering Building TBA Email: dgonza10(at)gmu.edu (Virtual) Office Hours: Monday 3:00pm-4:00pm, Thursday 3:00pm-4:00pm, or by appointment Join Office Hours Course Meeting Times Class Hours: Tuesdays, 4:30pm-7:10pm Class Room: Sandbridge Hall Room 107 1 Virtual Course Spaces Course Website : Syllabus, Schedule, Assignments, Lecture Slides, Lecture Recordings Zoom : Hybrid Office Hours - Zoom Link (Requires GMU Zoom Account) Ed Discussions 2 : Announcements, Discussion Blackboard (MyMason) : Grades A Note to Students during COVID-19 Dear Students, Welcome to SWE-432 for the Fall 2021 semester! These are undoubtedly uncertain times, and first and foremost I want you to know that, as an instructor, I am here for you. I want you to be successful in this course, and I want to help facilitate that success. If you feel like you are falling behind, are affected by unforeseen circumstances, or simply want to discuss course material and its applications, send me an email! I am available and happy to hear from you. -Prof. Moran Course Philosophy Web applications dominate the modern computing landscape. From finance, to transportation, to entertainment, these applications increasingly dictate how we interact with technology in our daily lives. However, programming for the modern web can seem to be a daunting challenge. Many questions arise such as What framework (from the many) should I use? How do I support desktop and mobile? How do I know if my application is usable? Can my application scale? In this course we aim to equip you with the knowledge required to be successful in modern web development. As such, this course has three main philosophical objectives: 1) Equip you with the foundational knowledge related to the concepts that drive modern web applications. For this objective, we will examine some of the conceptual underpinnings of modern web development such as principles of asynchronous programming, backend web development, and persistence, HTTP requests, etc. 2) Explore some of the most popular current web programming frameworks/libraries to provide practical experience using tools in use by developers today. For this objective, we will explore the React web programming library in some depth. 3) Provide an understanding of the software engineering tools and practices that are available to achieve \"good design\" in a variety of settings. For this objective, we will explore topics such as empirical and analytical methods for conducting usability evaluations, as well as different principles for usable interface design that facilitate the development of User Interfaces. Learning Outcomes Knowledge of quantitative engineering principles for how to build software user interfaces, especially web-based user interfaces, that are usable Understanding the client-server and message-passing computing models in the context of web applications Knowledge for how to build usable, secure and effective web applications Theoretical and practical knowledge about how data are stored and shared in web applications Component software development using specific technologies Understanding that usability is more important than efficiency for almost all modern software projects, and often the primary factor that leads to product success Backup Instruction (should the class need to pivot to virtual) will be conducted on Zoom Zoom Link (Requires Signing In with GMU Zoom Account) \u21a9 Ed Discussions is a new type of software that we will be trialing for this semester. Think of this as a supercharged and easy to use version of Piazza \ud83d\ude42 \u21a9","title":"Home"},{"location":"#course-description","text":"This course will provide a comprehensive introduction to web app development, covering JavaScript, back end development, front end development, and user interface design.","title":"Course Description"},{"location":"#welcome-video","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"Welcome Video"},{"location":"#general-course-information","text":"","title":"General Course Information"},{"location":"#course-meeting-times","text":"Class Hours: Tuesdays, 4:30pm-7:10pm Class Room: Sandbridge Hall Room 107 1","title":"Course Meeting Times"},{"location":"#virtual-course-spaces","text":"Course Website : Syllabus, Schedule, Assignments, Lecture Slides, Lecture Recordings Zoom : Hybrid Office Hours - Zoom Link (Requires GMU Zoom Account) Ed Discussions 2 : Announcements, Discussion Blackboard (MyMason) : Grades","title":"Virtual Course Spaces"},{"location":"#a-note-to-students-during-covid-19","text":"Dear Students, Welcome to SWE-432 for the Fall 2021 semester! These are undoubtedly uncertain times, and first and foremost I want you to know that, as an instructor, I am here for you. I want you to be successful in this course, and I want to help facilitate that success. If you feel like you are falling behind, are affected by unforeseen circumstances, or simply want to discuss course material and its applications, send me an email! I am available and happy to hear from you. -Prof. Moran","title":"A Note to Students during COVID-19"},{"location":"#course-philosophy","text":"Web applications dominate the modern computing landscape. From finance, to transportation, to entertainment, these applications increasingly dictate how we interact with technology in our daily lives. However, programming for the modern web can seem to be a daunting challenge. Many questions arise such as What framework (from the many) should I use? How do I support desktop and mobile? How do I know if my application is usable? Can my application scale? In this course we aim to equip you with the knowledge required to be successful in modern web development. As such, this course has three main philosophical objectives: 1) Equip you with the foundational knowledge related to the concepts that drive modern web applications. For this objective, we will examine some of the conceptual underpinnings of modern web development such as principles of asynchronous programming, backend web development, and persistence, HTTP requests, etc. 2) Explore some of the most popular current web programming frameworks/libraries to provide practical experience using tools in use by developers today. For this objective, we will explore the React web programming library in some depth. 3) Provide an understanding of the software engineering tools and practices that are available to achieve \"good design\" in a variety of settings. For this objective, we will explore topics such as empirical and analytical methods for conducting usability evaluations, as well as different principles for usable interface design that facilitate the development of User Interfaces.","title":"Course Philosophy"},{"location":"#learning-outcomes","text":"Knowledge of quantitative engineering principles for how to build software user interfaces, especially web-based user interfaces, that are usable Understanding the client-server and message-passing computing models in the context of web applications Knowledge for how to build usable, secure and effective web applications Theoretical and practical knowledge about how data are stored and shared in web applications Component software development using specific technologies Understanding that usability is more important than efficiency for almost all modern software projects, and often the primary factor that leads to product success Backup Instruction (should the class need to pivot to virtual) will be conducted on Zoom Zoom Link (Requires Signing In with GMU Zoom Account) \u21a9 Ed Discussions is a new type of software that we will be trialing for this semester. Think of this as a supercharged and easy to use version of Piazza \ud83d\ude42 \u21a9","title":"Learning Outcomes"},{"location":"assignments/","text":"Course Assignments Assignments Overview There will be 5 major assignments and will distributed over the course of the semester such that you will have two weeks to complete each assignment. Each of these assignments will help you to implement and gain experience with the different concepts and reinforce the material taught during lectures. These assignments will range from implementing simple web apps with a minimal feature set to Frontend and Backend development, to evaluating the user experience of a web app. Collaboration Policy Homeworks should be completed individually, without close collaboration with other students. You are free to discuss \"high-level\" ideas with other students in the class. However, you are not allowed to share code under any circumstance. If you have any doubts about this policy, ask Dr. Moran or David. We are here to help! Assignment Schedule & Instructions All HWs are due by the time class begins (4:30pm) on the due date indicated. See the full course schedule for additional information. .center { display: block; margin-left: auto; margin-right: auto; } Assignment Due Date Assignment Description Assignment 1: Javascript September 7th Assignment Page Assignment 2: Backend Development September 28th Assignment Page Assignment 3: Persistence & Frontend Development October 26th Assignment 4: Interactive Frontend November 16th Assignment 5: User Experience Design November 30th","title":"Assignments"},{"location":"assignments/#course-assignments","text":"","title":"Course Assignments"},{"location":"assignments/#assignments-overview","text":"There will be 5 major assignments and will distributed over the course of the semester such that you will have two weeks to complete each assignment. Each of these assignments will help you to implement and gain experience with the different concepts and reinforce the material taught during lectures. These assignments will range from implementing simple web apps with a minimal feature set to Frontend and Backend development, to evaluating the user experience of a web app.","title":"Assignments Overview"},{"location":"assignments/#collaboration-policy","text":"Homeworks should be completed individually, without close collaboration with other students. You are free to discuss \"high-level\" ideas with other students in the class. However, you are not allowed to share code under any circumstance. If you have any doubts about this policy, ask Dr. Moran or David. We are here to help!","title":"Collaboration Policy"},{"location":"assignments/#assignment-schedule-instructions","text":"All HWs are due by the time class begins (4:30pm) on the due date indicated. See the full course schedule for additional information. .center { display: block; margin-left: auto; margin-right: auto; }","title":"Assignment Schedule &amp; Instructions"},{"location":"github-heroku-instructions/","text":"Overview This tutorial explains how to deploy and develop a Heroku app through GitHub that can run a node.js microservice. The tutorial covers creating GitHub and Heroku accounts, deploying your app via Heroku, and developing your web app locally. To work through this tutorial, you will need to be connected to the internet, you will need to be comfortable issuing commands through a command-line terminal interface, be comfortable with the git version control system, and you will need to know how to program in javascript and node.js . Prelude To develop web apps, it is important to mentally separate development from deployment. Development includes design, programming, testing, and debugging. Development is usually done locally on the developer\u2019s computer. Deploying is the process of publishing a web app to a server so users can access it, including compiling, installing executables in appropriate folders (or directories in Unix-speak), checking connections to resources such as databases, and creating the URLs that clients will use to run the web app. In a large project, these issues can get quite complex and professional deployers take care of it. Our deployment process is small, simple, and student accessible. Heroku is a free hosting service for web apps than can be linked with GitHub to auto-deploy. Heroku also offers development tools so you can test and debug your app locally. This tutorial focuses on a node.js web application, but Heroku supports several other web software technologies. We will be using GitHub Classroom to help manage the GitHub repositories for this assignment, and we also cover the basics of using it in this tutorial. Please take a moment to explore each concept, technology, command, activity, and action used in this tutorial. We try to strike a balance between brevity and completeness, and welcome feedback and suggestions. (Feel free to make an Ed post if you have questions!) Additionally, check out Dr. Moran's Week 4 lecture video , where he covered many of the basics of getting started with Homework 2 using node.js and Express . Create GitHub and Heroku Accounts The first thing that you need to do is create free accounts for both GitHub and Heroku . You can sign up for a free GitHub account account using this link . You can sign up for a free Heroku account account using this link . Joining the Assignment in GitHub Classroom Accepting the Assignment In order help organize the repos for the second homework assignment, we will be making use of GitHub Classroom . By \"accepting\" the assignment in GitHub Classroom, the service will automatically create a copy of the repository with the starter code that we covered in class. This will help get you up and running for this assignment. To \"accept\" the assignment, please click on the button below. (Note that you will be prompted to sign in to your GitHub account if you haven't already) .center { display: block; margin-left: auto; margin-right: auto; } Click Here to Accept the Assignment on GitHub Classroom After you click on the link above you will be presented with the screen below. Simply click \"Accept\" to continue. You will then see a message that the service is working to create your assignment. After a few seconds, you can refresh the page and you should see a page similar to the following: You can then click on the link to view your newly created repository. This repository should look like the example you see below. Note It is important to note that you should only work out of this repository for this assignment. We will grade the last commit made before the deadline (see the hw2 assignment page for more details). If you make a commit after the deadline, we will grade that instead and your assignment will be considered late. Warning Note that the repo that is created is not associated with your GitHub username. Instead, it is associated with the GMU-SWE432-F21 GitHub Organization and your GitHub user is granted access. Therefore, it may not show up in the usual places where you find your personal repos in GitHub. Once you are added to the organization (see next instructions) it will be easy to access (You can do this by access the organizations page of your account). However, we also encourage you to bookmark link to the repository generated by GitHub Classroom. Joining the Class Organization In order to properly deploy your application to Heroku, the instructors will need to add you to the GMU-SWE432-F21 GitHub Organization. This can only be done after you accept the assignment via the button above. By adding you to the organization, this will grant you the privilege to deploy the app from the organization in Heroku. We ask that all students \"accept\" the assignment in GitHub classroom by Monday, September 20th. However, we will add students as they register to the best of our ability. You can confirm that you were successfully added to the organization by seeing if your name appears in the member list here . Note In order to join the organization and deploy your app through Heroku, you must accept the invitation sent to you by the instructors. You will receive an email invitation asking you to join the organization, and you should also see the invitation in GitHub if you visit the organization page . Note If you are waiting on gaining access to the GMU-SWE432-F21 GitHub organization, you can skip ahead to the section on local development of this tutorial and come back to set up your Heroku deployment later. Starter Project Structure In order to give you an overview of the starter project, below, we provide the details regarding the most important included files below: app.js - This is the main JavaScript file containing the express app module and some initial logic to demonstrate the implementation of a couple very basic API endpoints. This should be your starting point for implementing the logic of your app. Note, that is is likely you will want to write some of your functionality in multiple files. That is, in order to better organize your web app ( keeping in mind the principles of coupling and cohesion from class ) you will likely want to break some units of functionality into different classes and files. In this case, you should export these files as modules and import them into the app.js file. Note that you should only have one express server for this mircoservice pckage.json - This the configuration file for npm . This lists several different attributes for your application and provides some details about the various modules (i.e., packages) being used by the project. You are free to update this file if you wish, but this is neither required nor necessary for this project. app.test.js - This file will hold all of your jest / supertest unit tests for HW Assignment #2. We have provided one example test in Jest format that makes use of the supertest framework to validate some properties of the HTTP requests made by our tests. You do not need to write all of your tests using supertest. In other words, your tests can and should test smaller portions of functionality that don't necessarily involve making a call to your API endpoint. For these cases normal jest tests written in the format we discussed in class will suffice. server.js - This file contains the listen statement that starts the server. You will notice that the app.js module is imported. The reasons this functionality is broken up into a separate file and not included in the app.js file is simply to make the automated testing process with jest and supertest easier. Procfile - This file contains some configuration information for Heroku. Essentially this tells Heroku what we want run when the app is deployed to the service. If you keep your main functionality in app.js , you should not have to modify this file. Understanding Continuous Integration with GitHub Actions Currently, the starter repo is configured to run your Jest tests each time you push your code to the repository (See Section 5 for more information about how to push changes to your repo). This form of automated testing is a type of continuous integration (CI) . Continuous integration is essentially the practice of automating the integration of code changes from contributors to a software project, and is generally considered to be a DevOps best practice. Here we are using a simple form of CI, as your automated Jest tests will run each time you modify code and update your Github repo with the changes. As we will see in the next section ,we will configure Heroku to only deploy the application if your automated tests pass. We are enabling the automated tests using GitHub Actions . WE will touch on this more later in this tutorial. Deploying your Web App via Heroku Now that you have been granted access to the HW Assignment #2 starter repo through GitHub Classroom and you have been accepted into the GMU-SWE432-F21 GitHub Organization you are ready to deploy the starter web application using Heroku. Your Heroku app contains all the javascript files that you will deploy for your microservice. The name you choose becomes part of the URL address to your web apps. For instance, you can access an example web-app at https://kevin-moran-swe432-hw2.herokuapp.com for the example illustrated in this section. First you should sign into your Heroku account and navigate to the dashboard landing page illustrated below. Then you should click on the \"Create New App\" button highlighted in red. This will bring you to the screen displayed below. Next, you should create a name for your application. We would like you to adhere to the following naming convention when creating your app: <firstname-lastname>-swe432-hw2 . For example if Dr. Moran were creating his Heroku app, he would use kevin-moran-swe432-hw2 , as shown in the example url at the beginning of this section. After this you should click on the \"Create App\" button. Doing that should bring you to the screen shown below. Next you will need to connect your GitHub account to Heroku. To do this, click on the GitHub button highlighted in the image above. You will then be prompted to authenticate your GitHub account and acknowledge that you are giving the Heroku service access. After that you should see the repository selection interface shown in the screen below. Here you will need to select the repo that GitHub Classroom created for you. Therefore, you will need to select the class organization from the dropdown menu and then use the interface to search for your repository. After you select the proper repository, click on the \"Connect\" button to see the deployment interface as shown in the next screenshot. Warning It is important to note that you will not be able to deploy your application until you have accepted the invitation to join the GMU-SWE432-F21 GitHub Organization. After confirming your repository, you will then need to set up Heroku to deploy your application when you push to the main branch of your repository. To do this, you should \"check\" the option that will wait until your CI passes before deployment (this ensures you only deploy code that passes all of your tests). And then you should click on the \"Enable Automatic Deployment\" button. This means that each time you push to the main branch of your repository, and all of your automated tests pass, then your application will get deployed. Finally, you can click on the \"Deploy Branch\" button to deploy the current version of your application. Compile and Build Errors Heroku compiles your code when you push it. If the compile fails, you can see the errors through the Heroku dashboard . Click the \"Activity\" tab, and look for a red message reading \u201cBuild failed.\u201d Note that if your automated tests fail in GitHub, then your application will not be deployed. When you are ready to work through the next step of this tutorial, you can learn how to develop and compile locally, which is quicker and easier. Setting Up and Using your Local Development Environment Now that you have a GitHub repository to work from, and your web app will automatically deploy using Heroku, you need to set up an environment where you can develop and test your microservice \"locally\" on your own machine. This section of the guide will walk you through the different steps and commands necessary to do so. Note This section of the tutorial assumes some familiarity with Git. If you are newer to using the Git version control system, I would encourage you to check out this guide . Downloading and Installing Node.js and Git Before we can get started with setting up your local development environment, you will need to install Node.js on your machine. Please visit the node.js download page in order to download the version that is appropriate for your machine and operating system. Install Git on your local machine from Git\u2019s download site if you do not already have it installed. This will let you use the git command. For Windows, the Git download above adds bash if you do not already have it and has its own command window. If you already use cygwin , Git will add its command folder to your PATH environment variable. You can also use Windows Subsystem for Linux as mentioned earlier on in this guide. Cloning Your repository The first thing that you will need to do is clone the repository that GitHub Classroom created for you. To do this, navigate to your repo page and click on the \"Clone\" button, and then copy the url that is displayed by clicking on the clipboard icon as shown in the image below. Next you will need to clone the repo from the command line. To do this, you can execute the following command. Note that you only need to run this command once. 1 git clone https://github.com/GMU-SWE432-F21/<your_repo_name> Tip Make sure you navigate to the local directory where you would like your repository to be located before you clone your repo. Note Note that GitHub recently changed how it handles authentication. As such, you may need to set up an ssh key , use a personal access token, or authenticate using OAuth. Check out this article for you can set up command line access. Feel free to post any questions to Ed. Deploying your Microservice Locally Now that you have cloned the repository by downloading it to your machine, you can deploy it locally to quickly check changes using an application such as Postman without having to push your code to GiHub and deploy to Heroku. To deploy your application locally, you can use the following commands: 1 2 3 cd <your-repo-name> # This will move you into the proper directory npm install # This will install all the neccesary packages npm start # This will start the express server and listen on port 3000 This will deploy a running version of your microservice at http://localhost:3000 . Editing Code Now that you know how to run your code locally, you can start to work on your project by editing your code! To do this, you can use your Text Editor or IDE of choice. Some potential options include vim , Sublime Text , Atom , and VSCode among many other options. Feel free to use whatever editor you feel most comfortable with for this homework assignment. Using Postman to Debug and Test your API Endpoints Throughout the development process, you may wish to test or debug the behavior of your API endpoints. To do this, you can use the Postman app to send various types of requests. First download Postman here . Then, once the application is installed, you can create a new entry and send requests using the interface as seen below. Your browser does not support the video element. Kindly update it to the latest version. Running your Jest Tests Locally While the tests that you write will be automatically executed each time you commit your code to your repo, you can also run these tests locally to get an idea of their behavior before you commit and push your changes to the remote GitHub repository. To run your tests locally, you can run the following command within the directory of your project: 1 npm test # This will run all of the jest tests in the app.test.js file You will then see the output of the tests and whether or not they passed successfully. Pushing your Local Changes to the Remote Repo Reuse the following commands every time you need to send your changes to GitHub, in a terminal command-line window. Run these commands from your same project folder. 1 2 3 git add . git commit -m \"message explaining this commit\" # A good first-time message might be: \"Initial commit: first changes\" git push The text in quotes should explain what this current commit is doing and should be clear and explicit to avoid creating maintenance debt. The idea is to document why you made the changes so that everyone who wants to contribute to your project understand, including you after a month not looking at the file. Note You may asked to authenticate with GitHub the first time you push. If you push again without changing anything, you will get the message \u201cEverything up-to-date.\u201d That's a good way to check if your repo is synchronized with your computer. Examining Jest CI Test Results in GitHub Actions The starter GitHub repo is set up to run the Jest tests in the app.test.js file upon each commit to the main branch of the repository. If any of the tests fail, the CI process will fail and this will be indicated with red \"X\" on the main page of your repo, and GitHub will likely also send you a notification email that your automated tests have failed. You can view the errors by clicking on the red \"X\" and checking the test logs. Currently, the tests are configured to run via GitHub Actions by getting deployed to a remote virtual server with an Ubuntu operating system, where the npm install and npm test commands are executed. We don't anticipate you needing to change this configuration, as it is fine to keep all of your tests in the app.test.js for this assignment. We expect that all of your (at least) 12 unit tests will have passed via CI by the time you turn in the assignment. That is, when you make your final commit (see the Submission Section ) we expect all tests to be passing in GitHub. Submitting Your Assignment Updating your Project README In order for your assignment to be considered for grading, you must be sure that you fill out the following information at the top of your README file and ensure that this is up to date in your GitHub repo. Student Name Student G-number Heroku Deployment URL Description of your 7 API endpoints Warning Failure to include this information in your submission is likely to result in a zero for the assignment! Submission Protocol There is no formal submission process for this assignment. We will simply grade the last commit to the main branch of your repository before the deadline of 4:30pm on Wednesday, September 28th. If you make a commit after the deadline, we will grade the latest commit and your assignment will be considered late. Per our course policy, assignments submitted over 48 late will not be accepted.","title":"Deploying a Node.js Web App Using GitHub and Heroku"},{"location":"github-heroku-instructions/#overview","text":"This tutorial explains how to deploy and develop a Heroku app through GitHub that can run a node.js microservice. The tutorial covers creating GitHub and Heroku accounts, deploying your app via Heroku, and developing your web app locally. To work through this tutorial, you will need to be connected to the internet, you will need to be comfortable issuing commands through a command-line terminal interface, be comfortable with the git version control system, and you will need to know how to program in javascript and node.js .","title":"Overview"},{"location":"github-heroku-instructions/#prelude","text":"To develop web apps, it is important to mentally separate development from deployment. Development includes design, programming, testing, and debugging. Development is usually done locally on the developer\u2019s computer. Deploying is the process of publishing a web app to a server so users can access it, including compiling, installing executables in appropriate folders (or directories in Unix-speak), checking connections to resources such as databases, and creating the URLs that clients will use to run the web app. In a large project, these issues can get quite complex and professional deployers take care of it. Our deployment process is small, simple, and student accessible. Heroku is a free hosting service for web apps than can be linked with GitHub to auto-deploy. Heroku also offers development tools so you can test and debug your app locally. This tutorial focuses on a node.js web application, but Heroku supports several other web software technologies. We will be using GitHub Classroom to help manage the GitHub repositories for this assignment, and we also cover the basics of using it in this tutorial. Please take a moment to explore each concept, technology, command, activity, and action used in this tutorial. We try to strike a balance between brevity and completeness, and welcome feedback and suggestions. (Feel free to make an Ed post if you have questions!) Additionally, check out Dr. Moran's Week 4 lecture video , where he covered many of the basics of getting started with Homework 2 using node.js and Express .","title":"Prelude"},{"location":"github-heroku-instructions/#create-github-and-heroku-accounts","text":"The first thing that you need to do is create free accounts for both GitHub and Heroku . You can sign up for a free GitHub account account using this link . You can sign up for a free Heroku account account using this link .","title":"Create GitHub and Heroku Accounts"},{"location":"github-heroku-instructions/#joining-the-assignment-in-github-classroom","text":"Accepting the Assignment In order help organize the repos for the second homework assignment, we will be making use of GitHub Classroom . By \"accepting\" the assignment in GitHub Classroom, the service will automatically create a copy of the repository with the starter code that we covered in class. This will help get you up and running for this assignment. To \"accept\" the assignment, please click on the button below. (Note that you will be prompted to sign in to your GitHub account if you haven't already) .center { display: block; margin-left: auto; margin-right: auto; } Click Here to Accept the Assignment on GitHub Classroom After you click on the link above you will be presented with the screen below. Simply click \"Accept\" to continue. You will then see a message that the service is working to create your assignment. After a few seconds, you can refresh the page and you should see a page similar to the following: You can then click on the link to view your newly created repository. This repository should look like the example you see below. Note It is important to note that you should only work out of this repository for this assignment. We will grade the last commit made before the deadline (see the hw2 assignment page for more details). If you make a commit after the deadline, we will grade that instead and your assignment will be considered late. Warning Note that the repo that is created is not associated with your GitHub username. Instead, it is associated with the GMU-SWE432-F21 GitHub Organization and your GitHub user is granted access. Therefore, it may not show up in the usual places where you find your personal repos in GitHub. Once you are added to the organization (see next instructions) it will be easy to access (You can do this by access the organizations page of your account). However, we also encourage you to bookmark link to the repository generated by GitHub Classroom. Joining the Class Organization In order to properly deploy your application to Heroku, the instructors will need to add you to the GMU-SWE432-F21 GitHub Organization. This can only be done after you accept the assignment via the button above. By adding you to the organization, this will grant you the privilege to deploy the app from the organization in Heroku. We ask that all students \"accept\" the assignment in GitHub classroom by Monday, September 20th. However, we will add students as they register to the best of our ability. You can confirm that you were successfully added to the organization by seeing if your name appears in the member list here . Note In order to join the organization and deploy your app through Heroku, you must accept the invitation sent to you by the instructors. You will receive an email invitation asking you to join the organization, and you should also see the invitation in GitHub if you visit the organization page . Note If you are waiting on gaining access to the GMU-SWE432-F21 GitHub organization, you can skip ahead to the section on local development of this tutorial and come back to set up your Heroku deployment later. Starter Project Structure In order to give you an overview of the starter project, below, we provide the details regarding the most important included files below: app.js - This is the main JavaScript file containing the express app module and some initial logic to demonstrate the implementation of a couple very basic API endpoints. This should be your starting point for implementing the logic of your app. Note, that is is likely you will want to write some of your functionality in multiple files. That is, in order to better organize your web app ( keeping in mind the principles of coupling and cohesion from class ) you will likely want to break some units of functionality into different classes and files. In this case, you should export these files as modules and import them into the app.js file. Note that you should only have one express server for this mircoservice pckage.json - This the configuration file for npm . This lists several different attributes for your application and provides some details about the various modules (i.e., packages) being used by the project. You are free to update this file if you wish, but this is neither required nor necessary for this project. app.test.js - This file will hold all of your jest / supertest unit tests for HW Assignment #2. We have provided one example test in Jest format that makes use of the supertest framework to validate some properties of the HTTP requests made by our tests. You do not need to write all of your tests using supertest. In other words, your tests can and should test smaller portions of functionality that don't necessarily involve making a call to your API endpoint. For these cases normal jest tests written in the format we discussed in class will suffice. server.js - This file contains the listen statement that starts the server. You will notice that the app.js module is imported. The reasons this functionality is broken up into a separate file and not included in the app.js file is simply to make the automated testing process with jest and supertest easier. Procfile - This file contains some configuration information for Heroku. Essentially this tells Heroku what we want run when the app is deployed to the service. If you keep your main functionality in app.js , you should not have to modify this file. Understanding Continuous Integration with GitHub Actions Currently, the starter repo is configured to run your Jest tests each time you push your code to the repository (See Section 5 for more information about how to push changes to your repo). This form of automated testing is a type of continuous integration (CI) . Continuous integration is essentially the practice of automating the integration of code changes from contributors to a software project, and is generally considered to be a DevOps best practice. Here we are using a simple form of CI, as your automated Jest tests will run each time you modify code and update your Github repo with the changes. As we will see in the next section ,we will configure Heroku to only deploy the application if your automated tests pass. We are enabling the automated tests using GitHub Actions . WE will touch on this more later in this tutorial.","title":"Joining the Assignment in GitHub Classroom"},{"location":"github-heroku-instructions/#deploying-your-web-app-via-heroku","text":"Now that you have been granted access to the HW Assignment #2 starter repo through GitHub Classroom and you have been accepted into the GMU-SWE432-F21 GitHub Organization you are ready to deploy the starter web application using Heroku. Your Heroku app contains all the javascript files that you will deploy for your microservice. The name you choose becomes part of the URL address to your web apps. For instance, you can access an example web-app at https://kevin-moran-swe432-hw2.herokuapp.com for the example illustrated in this section. First you should sign into your Heroku account and navigate to the dashboard landing page illustrated below. Then you should click on the \"Create New App\" button highlighted in red. This will bring you to the screen displayed below. Next, you should create a name for your application. We would like you to adhere to the following naming convention when creating your app: <firstname-lastname>-swe432-hw2 . For example if Dr. Moran were creating his Heroku app, he would use kevin-moran-swe432-hw2 , as shown in the example url at the beginning of this section. After this you should click on the \"Create App\" button. Doing that should bring you to the screen shown below. Next you will need to connect your GitHub account to Heroku. To do this, click on the GitHub button highlighted in the image above. You will then be prompted to authenticate your GitHub account and acknowledge that you are giving the Heroku service access. After that you should see the repository selection interface shown in the screen below. Here you will need to select the repo that GitHub Classroom created for you. Therefore, you will need to select the class organization from the dropdown menu and then use the interface to search for your repository. After you select the proper repository, click on the \"Connect\" button to see the deployment interface as shown in the next screenshot. Warning It is important to note that you will not be able to deploy your application until you have accepted the invitation to join the GMU-SWE432-F21 GitHub Organization. After confirming your repository, you will then need to set up Heroku to deploy your application when you push to the main branch of your repository. To do this, you should \"check\" the option that will wait until your CI passes before deployment (this ensures you only deploy code that passes all of your tests). And then you should click on the \"Enable Automatic Deployment\" button. This means that each time you push to the main branch of your repository, and all of your automated tests pass, then your application will get deployed. Finally, you can click on the \"Deploy Branch\" button to deploy the current version of your application. Compile and Build Errors Heroku compiles your code when you push it. If the compile fails, you can see the errors through the Heroku dashboard . Click the \"Activity\" tab, and look for a red message reading \u201cBuild failed.\u201d Note that if your automated tests fail in GitHub, then your application will not be deployed. When you are ready to work through the next step of this tutorial, you can learn how to develop and compile locally, which is quicker and easier.","title":"Deploying your Web App via Heroku"},{"location":"github-heroku-instructions/#setting-up-and-using-your-local-development-environment","text":"Now that you have a GitHub repository to work from, and your web app will automatically deploy using Heroku, you need to set up an environment where you can develop and test your microservice \"locally\" on your own machine. This section of the guide will walk you through the different steps and commands necessary to do so. Note This section of the tutorial assumes some familiarity with Git. If you are newer to using the Git version control system, I would encourage you to check out this guide . Downloading and Installing Node.js and Git Before we can get started with setting up your local development environment, you will need to install Node.js on your machine. Please visit the node.js download page in order to download the version that is appropriate for your machine and operating system. Install Git on your local machine from Git\u2019s download site if you do not already have it installed. This will let you use the git command. For Windows, the Git download above adds bash if you do not already have it and has its own command window. If you already use cygwin , Git will add its command folder to your PATH environment variable. You can also use Windows Subsystem for Linux as mentioned earlier on in this guide. Cloning Your repository The first thing that you will need to do is clone the repository that GitHub Classroom created for you. To do this, navigate to your repo page and click on the \"Clone\" button, and then copy the url that is displayed by clicking on the clipboard icon as shown in the image below. Next you will need to clone the repo from the command line. To do this, you can execute the following command. Note that you only need to run this command once. 1 git clone https://github.com/GMU-SWE432-F21/<your_repo_name> Tip Make sure you navigate to the local directory where you would like your repository to be located before you clone your repo. Note Note that GitHub recently changed how it handles authentication. As such, you may need to set up an ssh key , use a personal access token, or authenticate using OAuth. Check out this article for you can set up command line access. Feel free to post any questions to Ed. Deploying your Microservice Locally Now that you have cloned the repository by downloading it to your machine, you can deploy it locally to quickly check changes using an application such as Postman without having to push your code to GiHub and deploy to Heroku. To deploy your application locally, you can use the following commands: 1 2 3 cd <your-repo-name> # This will move you into the proper directory npm install # This will install all the neccesary packages npm start # This will start the express server and listen on port 3000 This will deploy a running version of your microservice at http://localhost:3000 . Editing Code Now that you know how to run your code locally, you can start to work on your project by editing your code! To do this, you can use your Text Editor or IDE of choice. Some potential options include vim , Sublime Text , Atom , and VSCode among many other options. Feel free to use whatever editor you feel most comfortable with for this homework assignment. Using Postman to Debug and Test your API Endpoints Throughout the development process, you may wish to test or debug the behavior of your API endpoints. To do this, you can use the Postman app to send various types of requests. First download Postman here . Then, once the application is installed, you can create a new entry and send requests using the interface as seen below. Your browser does not support the video element. Kindly update it to the latest version. Running your Jest Tests Locally While the tests that you write will be automatically executed each time you commit your code to your repo, you can also run these tests locally to get an idea of their behavior before you commit and push your changes to the remote GitHub repository. To run your tests locally, you can run the following command within the directory of your project: 1 npm test # This will run all of the jest tests in the app.test.js file You will then see the output of the tests and whether or not they passed successfully. Pushing your Local Changes to the Remote Repo Reuse the following commands every time you need to send your changes to GitHub, in a terminal command-line window. Run these commands from your same project folder. 1 2 3 git add . git commit -m \"message explaining this commit\" # A good first-time message might be: \"Initial commit: first changes\" git push The text in quotes should explain what this current commit is doing and should be clear and explicit to avoid creating maintenance debt. The idea is to document why you made the changes so that everyone who wants to contribute to your project understand, including you after a month not looking at the file. Note You may asked to authenticate with GitHub the first time you push. If you push again without changing anything, you will get the message \u201cEverything up-to-date.\u201d That's a good way to check if your repo is synchronized with your computer. Examining Jest CI Test Results in GitHub Actions The starter GitHub repo is set up to run the Jest tests in the app.test.js file upon each commit to the main branch of the repository. If any of the tests fail, the CI process will fail and this will be indicated with red \"X\" on the main page of your repo, and GitHub will likely also send you a notification email that your automated tests have failed. You can view the errors by clicking on the red \"X\" and checking the test logs. Currently, the tests are configured to run via GitHub Actions by getting deployed to a remote virtual server with an Ubuntu operating system, where the npm install and npm test commands are executed. We don't anticipate you needing to change this configuration, as it is fine to keep all of your tests in the app.test.js for this assignment. We expect that all of your (at least) 12 unit tests will have passed via CI by the time you turn in the assignment. That is, when you make your final commit (see the Submission Section ) we expect all tests to be passing in GitHub.","title":"Setting Up and Using your Local Development Environment"},{"location":"github-heroku-instructions/#submitting-your-assignment","text":"Updating your Project README In order for your assignment to be considered for grading, you must be sure that you fill out the following information at the top of your README file and ensure that this is up to date in your GitHub repo. Student Name Student G-number Heroku Deployment URL Description of your 7 API endpoints Warning Failure to include this information in your submission is likely to result in a zero for the assignment! Submission Protocol There is no formal submission process for this assignment. We will simply grade the last commit to the main branch of your repository before the deadline of 4:30pm on Wednesday, September 28th. If you make a commit after the deadline, we will grade the latest commit and your assignment will be considered late. Per our course policy, assignments submitted over 48 late will not be accepted.","title":"Submitting Your Assignment"},{"location":"hands-on-sessions/","text":"Overview David, our TA will be dedicating part of his office hours each week to a \"Hands-On\" Session where you can more experience related to the different programming concepts that we will be covering over the course of this semester. To facilitate easy collaboration, these sessions will be conducted virtually via Zoom. Joining the Hands-On Sessions Hands-On Session Coordinator Instructor: David Gonzalez Samudio Office: Nguyen Engineering Building TBA Email: dgonza10(at)gmu.edu (Virtual) Meeting Time: Thursday 3:00pm-4:00pm Join Hands On Session Hands-On Session Schedule .center { display: block; margin-left: auto; margin-right: auto; } Session Date Session Materials Session 1: Vanilla JS vs. French Vanilla JS (1990s vs. 200s) August 26th Session Materials Session 2: Installing and Running NPM Locally September 2nd Session Materials Session 3: From XHR to Promises September 9th Session Materials Session 4: From Fetch to Axios September 16th Session Materials Session 5: A Chat on Fire! September 23rd Session Materials Session 6: Servlet Microservices September 30th Session Materials Session 7: Reacting to Client Requests using Microservices October 21st Session Materials Session 8: Material UI October 28th Session Materials","title":"Hands On Sessions"},{"location":"hands-on-sessions/#overview","text":"David, our TA will be dedicating part of his office hours each week to a \"Hands-On\" Session where you can more experience related to the different programming concepts that we will be covering over the course of this semester. To facilitate easy collaboration, these sessions will be conducted virtually via Zoom.","title":"Overview"},{"location":"hands-on-sessions/#joining-the-hands-on-sessions","text":"","title":"Joining the Hands-On Sessions"},{"location":"hands-on-sessions/#hands-on-session-schedule","text":".center { display: block; margin-left: auto; margin-right: auto; }","title":"Hands-On Session Schedule"},{"location":"hw1/","text":"Possible Points Due Date 50 pts September 7th - Before Class Overview In this homework assignment, you will download a JSON dataset from the web and write a simple data analytics package in JavaScript to answer eight questions about your dataset. Assignment Instructions Step 1: Download a JSON dataset from a website In this step, you will collect a JSON dataset containing at least 100 rows (i.e., entries) from a website. You are free to choose whatever data source you\u2019d like. Note that some, but not all, data sources may first require you to obtain an API key by creating an account with the data provider. You should not choose any API that requires you to authenticate using oAuth, as we have not yet covered oAuth. You may, but are not required to, choose a data set from one of the following: Open Data DC Public APIs (many of these are APIs for performing computation and are NOT datasets, check carefully) DC Metro After choosing an API, you should collect a dataset containing at least 100 records in JSON format. It\u2019s fine if your dataset contains more than 100 records. If you dataset is very large (> 10,000 records), you may wish to choose a subset of the dataset to enable you to test your code more quickly in the following steps. Step 2: List eight (8) questions you will answer about your dataset Now that you\u2019ve found a dataset, what insights can you extract from this dataset? In this step, you will write a list of eight (8) questions about your dataset. Each question should describe a statistic to compute from your dataset. For example, if your dataset is city demographic data, you might have the following questions: What is the average age of residents? What is the average year over year growth rate? What is the fastest growing city? What is the median population density? What is the city with the highest population density? Which is the average age of small cities with less than 100,000 people? What is the city with the oldest population? What is the city with the least amount of new home construction per capita? In order to more easily satisfy the requirements of step 3, you are encouraged to have a diversity of question types. Step 3: Implement a JavaScript program to answer your questions In this step, you will now create a JavaScript program to compute the answers to your eight questions using your JSON dataset. For each of the eight questions, your program should output to the JavaScript console (1) the question and (2) the answer. For example, if your question was \u201cWhat is the fastest growing city?\u201d, your program should write to the console: \u201cWhat is the fastest growing city? Springfield\u201d Your program must use all of the following JavaScript features: Variable declarations Let statement Const statement Functions Arrow function Default values Array.map() Loops For of statement For in statement Collections Instance of a Map or Set collection (only 1 is required) Strings Template literal Classes Class declaration Constructor Using an instance variable with this You are welcome and encouraged to consult any publicly available resource you wish (e.g., Mozilla Developer Network documentation , tutorials, blog posts, StackOverflow). However, in this assignment, all of the code you submit should be your own. Submission instructions Submit your HW through replit . Please follow these instructions for signing up for the replit account and accessing HW1. You should be able to complete this project using only the replit web interface. However, if you would like to work locally on your machine, you can code using your preferred environment and then upload the final .js file through replit. The HW assignment submission should consist of one .js file containing: A comment with your full name A comment containing a URL where your JSON dataset from step (1) can be found Your JSON dataset from step (1) (or a subset of the dataset that is at least 100 records) Your program from step (3) .center { display: block; margin-left: auto; margin-right: auto; } Click Here to Access the Assignment via Replit","title":"Hw1"},{"location":"hw1/#overview","text":"In this homework assignment, you will download a JSON dataset from the web and write a simple data analytics package in JavaScript to answer eight questions about your dataset.","title":"Overview"},{"location":"hw1/#assignment-instructions","text":"","title":"Assignment Instructions"},{"location":"hw1/#submission-instructions","text":"Submit your HW through replit . Please follow these instructions for signing up for the replit account and accessing HW1. You should be able to complete this project using only the replit web interface. However, if you would like to work locally on your machine, you can code using your preferred environment and then upload the final .js file through replit. The HW assignment submission should consist of one .js file containing: A comment with your full name A comment containing a URL where your JSON dataset from step (1) can be found Your JSON dataset from step (1) (or a subset of the dataset that is at least 100 records) Your program from step (3) .center { display: block; margin-left: auto; margin-right: auto; } Click Here to Access the Assignment via Replit","title":"Submission instructions"},{"location":"hw2/","text":"Possible Points Due Date 50 pts September 28th - Before Class Overview In this homework, you will create a simple microservice that fetches a dataset from a third-party API and offers endpoints for manipulating a local copy of this dataset. Assignment Instructions Step 1: Following the Tutorial for Setting up GitHub and Heroku Please follow the instructions for setting up this homework assignment in GitHub Classroom and deployment of your project via Heroku. .center { display: block; margin-left: auto; margin-right: auto; } Click Here to View HW 2 Tutorial Step 2: Describe 7 User Scenarios In this step, you will identify 7 scenarios that your microservice will support. Each scenario should correspond to a separate endpoint your microservice offers. At least 3 endpoints should involve information that is computed from your initial dataset (e.g., may not entirely consist of information from a 3rd party API). Imagine your microservice is offering city statistics. It might expose the following endpoints Retrieve a city GET /city/:cityID Add a new city POST /city Retrieve data on a city's average characteristics GET: /city/:cityID/averages Retrieve the list of top cities GET: /topCities Get the current weather on a city GET: /city/:cityID/weather Get the list of mass transit providers and links to their websites GET /city/:cityID/transitProvders Add a new transit provider POST /city/:cityID/transitProvders Step 3: Implement your 7 defined User Scenarios In this step, you will implement the seven user scenarios you identified in Step 2. You should ensure that requests made by your code to the third-party API are correctly sequenced. For example, requests that require data from previous request(s) should only occur after the previous request(s) have succeeded. If a request fails, you should retry the request, if appropriate, based on the HTTP status code returned. To ensure that potentially long running computation does not block your microservice and cause it to become nonresponsive, you should decompose long running computations into separate events. To ensure that you load data from your data provider at a rate that does not exceed the provider's rate limit, you may decide to use a timer to fetch data at specified time intervals. Requirements: Use fetch to retrieve a dataset from a remote web service. Data should be cached so that the same data is only retrieved from the remote web service once during the lifetime of your microservice. You should handle at least one potential error generated by the third-party API. Ensure all fetch requests are correctly sequenced. Declare at least 2 classes to process and store data and include some of your application logic. Endpoints At least 4 endpoints with route parameters (e.g. /:userId ) At least 5 GET endpoints At least 2 POST endpoints. All invalid requests to your service should return an appropriate error message and status code. Decompose at least one potentially long running computation into separate events. It is not required that the computation you choose to decompose execute for any minimum amount of time. But you should choose to decompose a computation whose length will vary with the data returned by your data provider (e.g., the number of records returned). Use await at least once when working with a promise. Use JEST to write at least 12 unit tests to ensure that your code works correctly Using Resources You are welcome and encouraged to consult any publicly available resource you wish (e.g., Mozilla Developer Network documentation , tutorials, blog posts, StackOverflow). However, in this assignment, all of the code you submit should be your own. Submission instructions In order for your assignment to be considered for grading, you must be sure that you fill out the following information at the top of your README file and ensure that this is up to date in your GitHub repo. Student Name Student G-number Heroku Deployment URL Description of your 7 API endpoints Warning Failure to include this information in your submission is likely to result in a zero for the assignment! There is no formal submission process for this assignment. We will simply grade the last commit to the main branch of your repository before the deadline of 4:30pm on Wednesday, September 28th. If you make a commit after the deadline, we will grade the latest commit and your assignment will be considered late. Per our course policy, assignments submitted over 48 late will not be accepted. Grading Rubric The grading for this project will be broken down as follows: API Endpoints - 4 points each (28 points total) We will take into account whether the requested Javascript features were used here. Unit Tests - 1 point each (12 points total) Coding Style - 10 points broken into the three categories below: Documentation & Comments - 4 points Modularity/Maintainability - 3 points Identifier Intelligibility - 3 points It is important to note that coding style will be an important component of this project's overall grading. Below, I provide some tips on earning these points: Documentation & Comments - In order to earn these points, you should document all non-obvious functionality in your code. For example, if there is some complex computation that is not easily understood via identifiers, then this should be clearly documented in a comment. However, you should try to avoid documenting obvious information. For example, adding a comment to a variable named citiesList that states \"This is the list that holds the cities\" is not likely to be a valuable comment in the future. Part of this grade will also stem from your description of your endpoints in your README file. Modularity - Throughout the course of this semester, one topic that has come up repeatedly is the idea of code maintainability . One of the best ways to help make your code more maintainable in the long run is to make it modular, that is try your best to achieve low coupling and high cohesion . We expect that you will break your project down into logical modules, and where appropriate, files. Identifier Intelligibility - The final code style related item we will look at is the intelligibility of your identifiers. This should be pretty straightforward, use identifier names that correspond well with the concepts you are trying to represent. Try to avoid unnecessarily short (e.g., i ) and unnecessarily long identifiers.","title":"HW Assignment 2 - Backend Development"},{"location":"hw2/#overview","text":"In this homework, you will create a simple microservice that fetches a dataset from a third-party API and offers endpoints for manipulating a local copy of this dataset.","title":"Overview"},{"location":"hw2/#assignment-instructions","text":"","title":"Assignment Instructions"},{"location":"hw2/#using-resources","text":"You are welcome and encouraged to consult any publicly available resource you wish (e.g., Mozilla Developer Network documentation , tutorials, blog posts, StackOverflow). However, in this assignment, all of the code you submit should be your own.","title":"Using Resources"},{"location":"hw2/#submission-instructions","text":"In order for your assignment to be considered for grading, you must be sure that you fill out the following information at the top of your README file and ensure that this is up to date in your GitHub repo. Student Name Student G-number Heroku Deployment URL Description of your 7 API endpoints Warning Failure to include this information in your submission is likely to result in a zero for the assignment! There is no formal submission process for this assignment. We will simply grade the last commit to the main branch of your repository before the deadline of 4:30pm on Wednesday, September 28th. If you make a commit after the deadline, we will grade the latest commit and your assignment will be considered late. Per our course policy, assignments submitted over 48 late will not be accepted.","title":"Submission instructions"},{"location":"hw2/#grading-rubric","text":"The grading for this project will be broken down as follows: API Endpoints - 4 points each (28 points total) We will take into account whether the requested Javascript features were used here. Unit Tests - 1 point each (12 points total) Coding Style - 10 points broken into the three categories below: Documentation & Comments - 4 points Modularity/Maintainability - 3 points Identifier Intelligibility - 3 points It is important to note that coding style will be an important component of this project's overall grading. Below, I provide some tips on earning these points: Documentation & Comments - In order to earn these points, you should document all non-obvious functionality in your code. For example, if there is some complex computation that is not easily understood via identifiers, then this should be clearly documented in a comment. However, you should try to avoid documenting obvious information. For example, adding a comment to a variable named citiesList that states \"This is the list that holds the cities\" is not likely to be a valuable comment in the future. Part of this grade will also stem from your description of your endpoints in your README file. Modularity - Throughout the course of this semester, one topic that has come up repeatedly is the idea of code maintainability . One of the best ways to help make your code more maintainable in the long run is to make it modular, that is try your best to achieve low coupling and high cohesion . We expect that you will break your project down into logical modules, and where appropriate, files. Identifier Intelligibility - The final code style related item we will look at is the intelligibility of your identifiers. This should be pretty straightforward, use identifier names that correspond well with the concepts you are trying to represent. Try to avoid unnecessarily short (e.g., i ) and unnecessarily long identifiers.","title":"Grading Rubric"},{"location":"replit-instructions/","text":"Using replit for Assignments This semester, we will be using replit for certain homework assignments. Replit is a cloud-based IDE that allows for programming with a range of different web technologies. This will allow us to facilitate answering questions and providing detailed feedback on your assignments. Please follow the steps below to sign up for a replit account and access assignments. Signing up for a replit account The first thing that you need to do before you can access replit, is to sign up for a free account using your gmu email address . This will allow you to join our class. You can sign up for a free replit account using this link . Joining the SWE-432 Course Team In replit, our course is organized as a \"team\", and you will need to join this team in order to access the class assignments. you can join the SWE-432 replit team using the button below: .center { display: block; margin-left: auto; margin-right: auto; } Click Here to Sign Up for SWE-432 on Replit Accessing Individual HW Assignments HW assignments that are to be completed through replit will have a link to the assignment at the bottom of the assignment page. Once you have signed up for an account, and joined the class via the link above, you can click on the button to join the assignment from the respective assignment page. For the sake of demonstration, let's work through adding the initial assignment for HW1 below. Click Here to Access HW Assignment 1 via Replit First click on the assignment link above and open it in a new window, this will prompt you to log in if you haven't already done so. Once you log in, you will be presented with the screen shown below. Here you can see the HW assignment, and the button to start working on the homework assignment, called the \"Start Project\" button. Click on the \"Start Project\" button to move on. Once you have clicked on the start project button, this will bring up the In-browser IDE for the HW assignment. The configuration of the IDE will be set up Dr. Moran & David specifically for each assignment. For example, for the first homework assignment, you will only be required to work in the script.js file. There are several important features that you should be aware of in the replit IDE that are highlighted below: File explorer (highlighted in red) - this will allow you to navigate between the various files for the HW assignment File Editor (highlighted in blue) - this is where you can edit your code and other text files for the assignment Web Browser Window (highlighted in green) - this will allow you to see the html result of your code (if required for a HW) Console/Shell (highlighted in purple) - this will allow you to see the shell output for your program Submit button (highlighted in yellow) - after you have completed your project, you use this button to submit your work. You can submit your work multiple times before the deadline. Once you have finished working on and testing your code, you can submit the assignment for review using the \"Submit\" button as indicated above. You can submit your code multiple times (e.g., you can submit, and then continue to edit your code and submit again).","title":"Replit instructions"},{"location":"replit-instructions/#using-replit-for-assignments","text":"This semester, we will be using replit for certain homework assignments. Replit is a cloud-based IDE that allows for programming with a range of different web technologies. This will allow us to facilitate answering questions and providing detailed feedback on your assignments. Please follow the steps below to sign up for a replit account and access assignments.","title":"Using replit for Assignments"},{"location":"replit-instructions/#signing-up-for-a-replit-account","text":"The first thing that you need to do before you can access replit, is to sign up for a free account using your gmu email address . This will allow you to join our class. You can sign up for a free replit account using this link .","title":"Signing up for a replit account"},{"location":"replit-instructions/#joining-the-swe-432-course-team","text":"In replit, our course is organized as a \"team\", and you will need to join this team in order to access the class assignments. you can join the SWE-432 replit team using the button below: .center { display: block; margin-left: auto; margin-right: auto; } Click Here to Sign Up for SWE-432 on Replit","title":"Joining the SWE-432 Course Team"},{"location":"replit-instructions/#accessing-individual-hw-assignments","text":"HW assignments that are to be completed through replit will have a link to the assignment at the bottom of the assignment page. Once you have signed up for an account, and joined the class via the link above, you can click on the button to join the assignment from the respective assignment page. For the sake of demonstration, let's work through adding the initial assignment for HW1 below. Click Here to Access HW Assignment 1 via Replit First click on the assignment link above and open it in a new window, this will prompt you to log in if you haven't already done so. Once you log in, you will be presented with the screen shown below. Here you can see the HW assignment, and the button to start working on the homework assignment, called the \"Start Project\" button. Click on the \"Start Project\" button to move on. Once you have clicked on the start project button, this will bring up the In-browser IDE for the HW assignment. The configuration of the IDE will be set up Dr. Moran & David specifically for each assignment. For example, for the first homework assignment, you will only be required to work in the script.js file. There are several important features that you should be aware of in the replit IDE that are highlighted below: File explorer (highlighted in red) - this will allow you to navigate between the various files for the HW assignment File Editor (highlighted in blue) - this is where you can edit your code and other text files for the assignment Web Browser Window (highlighted in green) - this will allow you to see the html result of your code (if required for a HW) Console/Shell (highlighted in purple) - this will allow you to see the shell output for your program Submit button (highlighted in yellow) - after you have completed your project, you use this button to submit your work. You can submit your work multiple times before the deadline. Once you have finished working on and testing your code, you can submit the assignment for review using the \"Submit\" button as indicated above. You can submit your code multiple times (e.g., you can submit, and then continue to edit your code and submit again).","title":"Accessing Individual HW Assignments"},{"location":"resources/","text":"Useful Campus Resources University Writing Center University Libraries Counseling and Psychological Services (CAPS) University Policies GMU Academic Calendar","title":"Resources"},{"location":"resources/#useful-campus-resources","text":"University Writing Center University Libraries Counseling and Psychological Services (CAPS) University Policies GMU Academic Calendar","title":"Useful Campus Resources"},{"location":"schedule/","text":"Course Schedule .md-sidebar--secondary:not([hidden]) { display: none; } .note{ width: 900px; } .md-content{ width: 900px; } .md-typeset__table{ width: 900px; } th.lecture { width: 15% } Week Topic References/Readings Hands-On Session Lecture Materials Assignments Due Week 1 - August 24th Topic 1: Course Overview A Re-introduction to Javascript Introduction to Commonly used ES6 features Vanilla JS vs. French Vanilla JS(1990s vs. 200s) Slides Video Topic 2: Javascript Week 2 - August 31st Topic 1: Organzing Code in Web Apps Closures Classes Intro to Node Package Manager Installing and Running NPM Locally Slides Video Topic 2: Javascript Tools & Testing Week 3 - September 7th Topic 1: Asynchronous Programming Part I Using Promises Node.js event loop From XHR to Promises Slides Video HW 1 Topic 2: Asynchronous Programming Part II Week 4 - September 14th Topic 1: Backend Web Development Intro to Node & Express Overview of HTTP Intro to REST From Fetch to Axios Slides Video Topic 2: Handling HTTP requests Week 5 - September 21st Topic 1: Persistence Firebase Get Started Firebase Structure Data Firebase Read & Write Data Microservices A Chat on Fire! Slides Topic 2: Microservices Week 6 - September 28th Topic 1: Security Intro to CORS Servlet Microservices HW 2 Topic 2: Templates, Databinding, and HTML Week 7 - October 5th Topic 1: Midterm Exam Fundamentals of DevOps Topic 2: Deployment Lecture (Virtual Lecture) Week 8 - October 12th No Class - Fall Break Week 9 - October 19th Topic 1: React Part I Reacting to Client Requests using Microservices Topic 2: React Part II Week 10 - October 26th Topic 1: CSS & DOM Material UI HW 3 Topic 2: React Part 3 Week 11 - November 2nd Topic 1: Usability and User-Centered Design Topic 2: Sketching and Prototyping Week 12 - November 9th Topic 1: Think-aloud Usability Studies Topic 2: Site Design Week 13 - November 16th Topic 1: Interaction Techniques HW 4 Topic 2: Visual Design Week 14 - November 23rd Topic 1: Information Visualization Topic 2: InfoVis Frameworks Week 15 - November 30th Review HW 5 Week 16 - December 7th Final Exam This schedule is subject to change throughout the course of the semester. Any changes will be announced on Piazza.","title":"Schedule"},{"location":"schedule/#course-schedule","text":".md-sidebar--secondary:not([hidden]) { display: none; } .note{ width: 900px; } .md-content{ width: 900px; } .md-typeset__table{ width: 900px; } th.lecture { width: 15% }","title":"Course Schedule"},{"location":"syllabus/","text":"Course Overview Instructors Faculty Teaching Assistant Instructor: Dr. Kevin Moran Office: Nguyen Engineering Building 4448 Email: kpmoran(at)gmu.edu (Hybrid) Office Hours: Monday 1:00pm-2:00pm, Wednesday, 1:00pm-2:00pm or by appointment Join Office Hours Instructor: David Gonzalez Samudio Office: Nguyen Engineering Building TBA Email: dgonza10(at)gmu.edu (Hybrid) Office Hours: Monday 3:00pm-4:00pm, Thursday 3:00pm-4:00pm, or by appointment Join Office Hours Course Meetings & Virtual Spaces Course Meeting Times Class Hours: Tuesdays, 4:30pm-7:10pm Class Room: Sandbridge Hall Room 107 1 Virtual Course Spaces Course Website : Syllabus, Schedule, Assignments, Lecture Slides, Lecture Recordings Zoom : Hybrid Office Hours - Zoom Link (Requires GMU Zoom Account) Ed Discussions 2 : Announcements, Discussion Blackboard (MyMason) : Grades The Continuing Impact of COVID on our Classroom Community You\u2019ll notice throughout this syllabus that there are references to the continuing impact of Covid-19 (and in particular the Delta variant) on course policies and procedures. We can only do our best work together if we are committed to caring for ourselves and our classmates. This means that as your professor, I am committed to an ethic of flexibility and understanding. Stay in communication with me, and I will do my best to help you get the resources you need to be successful, come what may this semester. In return, I ask that all students to abide by university policies\u2014in the classroom, this especially means policies regarding masking . As long as there is a mandatory mask policy in place I am requesting that there be no eating and drinking in class (I know\u2014it\u2019s close to dinner time\u2026 but this includes snacks). I will be offering a 15 minute break during class - during which time students can eat outside of the classroom. These COVD-related policies will be reiterated later in the syllabus, but I am putting this here for visibility: If you wake up feeling ill, please stay home . You\u2019ll see that our attendance policy this semester is flexible, and should it be necessary, there will be opportunities to attend class virtually. If you are sick and you email me and let me know, we will work together to make sure you are staying current with the course content. Course Description & Texts Overview This course will provide a comprehensive introduction to web app development, covering JavaScript, back end development, front end development, and user interface design. Learning Outcomes Knowledge of quantitative engineering principles for how to build software user interfaces, especially web-based user interfaces, that are usable Understanding the client-server and message-passing computing models in the context of web applications Knowledge for how to build usable, secure and effective web applications Theoretical and practical knowledge about how data are stored and shared in web applications Component software development using specific technologies Understanding that usability is more important than efficiency for almost all modern software projects, and often the primary factor that leads to product success Prerequisites You must be able to program using OO concepts, and have general knowledge of software engineering. The official course prerequisites can be found in the GMU Software Engineering Course Catalog . These are subject to change, so please check the catalog for the most up-to-date information. I rarely make exceptions to the listed prerequisites as they are for the benefit of students. However, if you have a compelling reason for an exception, please contact me. Required Textbooks & Other Course Materials There is no required textbook for this course, however, useful reading materials will be posted to the course schedule page that supplement the class lectures and will serve as appropriate reference material. All course materials will either be freely available online, or available as a PDF on Ed Discussions . Course Communication Communication Policies If you have a general question about an assignment or course content, first check the Ed Discussions Course Q/A Thread to see if someone has already answered your question. If not, post your question in the Q/A thread (under the appropriate heading), where your question will be answered either by other students or the course staff. For questions about grades or other matters, please contact the TA and instructor by email. Students must use their GMU email account for University communications. Per University policy, I cannot respond to messages sent from a non-Mason email address. See the GMU Email webpage for more information. Office Hours Office hours are typically times that we commit to being in our office, door open, first come, first served. However, this fall, due to potential concerns around the Delta variant of COVID-19, office hours will be held in a Hybrid format, both virtually via Zoom, and in-person in the instructors office, at the times indicated for each instructor. If you cannot make the scheduled office hours, we are happy to make appointments. We will inform the class if we need to miss office hours. Course Structure Course Modality This is an in-person course that will combine synchronous and asynchronous elements, meaning that we will meet together in person at designated a time each week, and the rest of the week\u2019s activities and discussions will be completed according to your own schedule via Ed Discussions . All important due dates will be listed on the Course Schedule . All work will be submitted via Ed Discussions (for discussions/quizzes) or Blackboard (for assignments) unless otherwise noted by the instructor. Note in the unlikely event that we need to pivot to online learning during the semester, I have a contingency plan for this that is detailed the course contingencies section of the syllabus. Lecture Format Given that we are scheduled to meet for over 2.5 hours, lectures in this course will be dynamic in nature. For most classes we will have two topics to cover, and I will provide a 15 minute break during the middle of class. Lectures on course concepts will often be followed up with in-class activities. Please bring a laptop or other personal computing device to class so that you can participate in the interactive quizzes and in-class activities (See the course technology requirements ). Class Etiquette Given the current state of spread the Delta variant of COVID-19, it means we have to be more mindful and considerate so that we can create a fun but safe and conducive learning environment for everyone. To foster this environment, I ask the following: Masks are required during class. As long as GMU mask policy remains in place, masks will be required in the classroom during class. To ensure the safety of all students, I am asking that there not be any eating or drinking during class lectures. I will provide a 15 minute break during lecture where you will have an opportunity to eat/drink outside of the classroom. Please refer to GMU's safe return to campus page for FAQs and more information. Certain lectures will have in-class activities to help demonstrate concepts This is a time to work with your classmates and prove out ideas that are taught in the course. If you have a question during lecture, please raise your hand I am happy to answer questions, but please keep it cordial and respectful. Please silence an cellular phones or other devices in class This will help to ensure a respectful environment for all. Readings There will be reference materials and readings that accompany various lectures. All readings are listed in the Course Schedule . Material covered in the readings may appear in the midterm and final exams. In general, I suggest reading relevant material before class meetings. The lectures may not cover all material from the readings and will often include material not found in the readings. So both reading and attending are important to your success in this class. Course Evaluation & Assignments Grading Grading Scale Your work will be graded on the following scale: A+ 100%-97% B+ 89%-87% C+ 79%-77% D+ 69%-67% A 96%-93% B 86%-83% C 76%-73% D 66%-63% A- 92%-90% B- 82%-80% C- 73%-70% D- 62%-60% Any grade below a 60% will result in failing the course. Grading Explanation: Receiving an \u201cA\u201d means that you did excellent work. \u201cA\u201d work is clear, insightful, creative, and for code-related assignments, typically exhibits very few, if any, observable bugs. It shows an obvious mastery of course material, but also goes above and beyond demonstrating understanding. A \u201cB\u201d denotes very good work that clearly fulfills all assignment requirements and demonstrates solid engagement with course material. A \u201cC\u201d is average. This work adequately addresses the assignment but may not fully meet requirements. \u201cC\u201d work does not distinguish itself in terms of its insight, creativity, or uptake of course material. If you are receiving \u201cD\u201d or \u201cF\u201d grades, this is a sign that you should set up a meeting with Dr. Moran so that we can work together on a plan to help you better approach the course material. Grading Breakdown Assignments 50% Mid-term exam 20% Final exam 20% Quizzes 10% Assignments & Exams Assignments (50%) There will be 5 major assignments and will distributed over the course of the semester such that you will have two weeks to complete each assignment. Each of these assignments will help you to implement and gain experience with the different concepts and reinforce the material taught during lectures. These assignments will range from implementing simple web apps with a minimal feature set to Frontend and Backend development, to evaluating the user experience of a web app. Each assignment will be worth 10% of your final grade, meaning that all assignments taken together will make up half of the overall course grade. In-Class Quizzes (10%) There will be short pass/fail quizzes in class that aim to help the instructor gauge student understanding of the material. Missed quizzes cannot be made up. However, you can miss up to 3 with no penalty. Out of fairness to other students in the course, no exceptions beyond this. there will be accommodations to take quizzes virtually should you fall ill during the semester. Midterm & Final Exam (20% & 20%) There will be a midterm exam and a non-cumulative final exam which will be given in class, or during the specific final exam period. The exam questions will consist of multiple choice and essay-style questions wherein you will be required to synthesize concepts taught throughout the course and apply them in specific contexts. Because this exam will be administered in person they will be due by the end of the class or exam period of the questions being posted. Exams will cover material from the lectures and assigned readings. Assignment Due Dates All Assignments are due by the time class begins (4:30pm) on the due date indicated on the Course Schedule . Late Policy & Makeups Unless arrangements are worked out in advance, missed tests cannot be made up. For assignments, 10% will be deducted for late HW assignments turned within 24 hours of the due date, and 20% will be deducted for late HW assignments turned in after 48 hours. Assignments submitted more than 48 hours late will receive a zero. I understand that we are still operating under extraordinary circumstances this semester. If you become ill, if you have a family emergency, or if something else happens that prevents you from completing work on time (either assignments or exams), please communicate with Dr. Moran. We will devise a plan to help you complete work on an altered schedule. Course Logistics Technology Requirements Activities and assignments in this course will regularly use the Ed Discussions learning system. Students are required to have regular, reliable access to a computer with an updated operating system (recommended: Windows 10 or Mac OSX 10.13 or higher) and a stable broadband Internet connection (cable modem, DSL, satellite broadband, etc., with at least a consistent 1.5 Mbps [megabits per second] download speed or higher. You can check your speed settings using this speed test . Course Recordings and Privacy All of our synchronous meetings in this class will be recorded to provide necessary information for students in this class. Recordings will be posted on the course website (for lectures). All course materials posted to Blackboard, Ed Discussions or other course sites are private; by federal law, any materials that identify specific students (via their name, voice, or image) must not be shared with anyone not enrolled in this class. Video recordings of class meetings that include audio or visual information from other students are private and must not be shared. Live Video Conference Meetings (e.g. Collaborate or Zoom) that include audio or visual information from other students must be viewed privately and not shared with others in your household. Classroom Environment My goal is to facilitate a positive, supportive, and interactive learning environment that fosters respect for people across identities. In this class, I welcome and value individuals and their differences across race, economic status, gender expression and identity, sex, sexual orientation, ethnicity, national origin, first language, religion, age, and ability. It is this diversity that will enrich our discussions about designing effective user interfaces for all . Please reference the Mason Diversity Statement for more on the University\u2019s commitment to diversity and inclusion. Gender Identity and Pronoun Use If you wish, please share your name and gender pronouns with Dr. Moran and how best to address you in class and via email. I use he/him/his for myself and you may address me as Dr. or Professor Moran. Campus Closure If the campus closes or class is canceled due to weather or any other concern, please check Piazza for updates on how to continue learning and information about any changes to events or assignments. Course Contingencies Given the continuing impact of COVID-19, particularly the recent Delta variant of the virus, there is real (although hopefully unlikely) chance that we may need to switch to virtual instruction at some point in the semester. With this mind, I have in place a contingency plan for this shift to virtual instruction. Course Lecture Modality Should we need to move online for any reason, we will use the Zoom web-conferencing software for lectures and in-class activities. Classes will still take place at their regularly scheduled time on Tuesdays from 4:30pm-7:10pm, although via Zoom instead of in the class room. In the event of shift to virtual learning, all instructor and TA office hours will also be online. In addition to the requirements above, students are required to have a device with a functional camera and microphone. In an emergency, you can connect through a telephone call, but video connection is the expected norm. Setting up Zoom In order to protect the privacy of office hours, students must use their GMU zoom accounts for Zoom. Note, that our zoom meetings will require the Zoom desktop client on Mac or PC, or on an iOS or Android device, you will NOT be able to join the class meetings using the Zoom web app in your browser. You can download the latest Zoom client from this link . Changes to Course Assignments & Exams In the event that a shift to online learning is necessary, all homework assignments will remain unchanged. However, the midterm and final exam will change to a take-home version with short essay and programming questions that must be completed over a 24 or 48 hour period. University Policies Safe Return to Campus All students taking courses with a face-to-face component are required to follow the university\u2019s public health and safety precautions and procedures outlined on the university Safe Return to Campus webpage . Similarly, all students in face-to-face and hybrid courses must also complete the Mason COVID Health Check daily, seven days a week. The COVID Health Check system uses a color code system and students will receive either a Green, Yellow, Red, or Blue email response . Only students who receive a \u201cgreen\u201d notification are permitted to attend courses with a face-to-face component. If you suspect that you are sick or have been directed to self-isolate, please quarantine or get testing. Faculty are allowed to ask you to show them that you have received a Green email and are thereby permitted to be in class. GMU Policy on Face Masks Students are required to follow Mason's current policy about facemask-wearing. As of August 11, 2021, all community members are required to wear a facemask in all indoor settings, including classrooms. An appropriate facemask must cover your nose and mouth at all times in our classroom. If this policy changes, you will be informed. If there is no mask mandate in place, students who prefer to wear masks either temporarily or consistently will always be welcome in the classroom. Emergency Communication If the campus closes, or if a class meeting needs to be canceled or adjusted due to weather or other concern, students should check Ed Discussions for updates on how to continue learning and for information about any changes to events or assignments. Academic Integrity GMU is an Honor Code university; please see the Office for Academic Integrity for a full description of the code and the honor committee process, and the Computer Science Department\u2019s Honor Code Policies regarding programming assignments. The principle of academic integrity is taken very seriously and violations are treated gravely. What does academic integrity mean in this course? Essentially this: when you are responsible for a task, you will perform that task. When you rely on someone else\u2019s work in an aspect of the performance of that task, you will give full credit in the proper, accepted form. Another aspect of academic integrity is the free play of ideas. Vigorous discussion and debate are encouraged in this course, with the firm expectation that all aspects of the class will be conducted with civility and respect for differing ideas, perspectives, and traditions. When in doubt (of any kind) please ask for guidance and clarification. Accommodations for Disabilities Disability Services at George Mason University is committed to providing equitable access to learning opportunities for all students by upholding the laws that ensure equal treatment of people with disabilities. If you are seeking accommodations for this class, please first visit http://ds.gmu.edu/ for detailed information about the Disability Services registration process. Then please discuss your approved accommodations with me. Disability Services is located in Student Union Building I (SUB I), Suite 2500. Email:ods@gmu.edu | Phone: (703) 993-2474 Diversity, Inclusion, & Anti-Racism Statement As a member of the George Mason University community, I will work to create an educational environment that is committed to anti-racism and inclusive excellence. An anti-racist approach to higher education acknowledges the ways that individual, interpersonal, institutional, and structural manifestations of racism against Black individuals, indigenous people, and other people of color contribute to inequality and injustice in our classrooms, on our campuses, and in our communities. Anti-racist work strives to provide our community members with resources to interrupt cycles of racism so as to cultivate a more equitable, inclusive, and just environment for all of our students, staff, faculty, alumni, and friends, regardless of racial background. I believe that the work of anti-racism starts with each individual; together, students and faculty in this course will build knowledge and take actions rooted in principles of equity, inclusion, and justice that we will carry with us throughout our lives. Religious Holidays If you will miss one of our Zoom sessions due to a religious holiday or observance, please let me know during the first two weeks of the semester so that I can plan our sessions in terms of anticipated attendance. Recordings of synchronous sessions will be available on the Course Website and Piazza. Title IX George Mason University is committed to providing a learning, living and working environment that is free from discrimination and a campus that is free of sexual misconduct and other acts of interpersonal violence in order to promote community well-being and student success. We encourage students who believe that they have been sexually harassed, assaulted or subjected to sexual misconduct to seek assistance and support. University Policy 1202: Sexual Harassment and Misconduct speaks to the specifics of Mason\u2019s process, the resources, and the options available to students. As a faculty member and designated \u201cResponsible Employee,\u201d I am required to report all disclosures of sexual assault, interpersonal violence, and stalking to Mason\u2019s Title IX Coordinator per university policy 1412. If you wish to speak with someone confidentially, please contact the Student Support and Advocacy Center (703-380-1434) or Counseling and Psychological Services (703-993-2380). You may also seek assistance from Mason\u2019s Title IX Coordinator (703-993-8730; titleix@gmu.edu ). Emergency Procedures All students are encouraged to enroll in the Mason Alert Emergency Notification System to receive timely warnings and notifications about incidents on campus: https://ready.gmu.edu/masonalert/. If you would like more information about emergency procedures visit http://www.fema.gov/ or http://ehs.gmu.edu/emergencymanagement/be-prepared/. Student Services There are a number of services on campus available to students to facilitate academic success and personal wellness. I will list links to a few of these services below. If you find that you are struggling in this course, or otherwise need assistance to guarantee your health and success during this semester, I am happy to help connect you to other campus resources. Please reach out to me. Counseling and Psychological Services University Libraries Writing Center Keep Learning: Learning Services (for COVID-19 learning resources) Backup Instruction (should the class need to pivot to virtual) will be conducted on Zoom Zoom Link (Requires Signing In with GMU Zoom Account) \u21a9 Ed Discussions is a new type of software that we will be trialing for this semester. Think of this as a supercharged and easy to use version of Piazza \ud83d\ude42 \u21a9","title":"Syllabus"},{"location":"syllabus/#course-overview","text":"","title":"Course Overview"},{"location":"syllabus/#instructors","text":"","title":"Instructors"},{"location":"syllabus/#course-meetings-virtual-spaces","text":"","title":"Course Meetings &amp; Virtual Spaces"},{"location":"syllabus/#the-continuing-impact-of-covid-on-our-classroom-community","text":"You\u2019ll notice throughout this syllabus that there are references to the continuing impact of Covid-19 (and in particular the Delta variant) on course policies and procedures. We can only do our best work together if we are committed to caring for ourselves and our classmates. This means that as your professor, I am committed to an ethic of flexibility and understanding. Stay in communication with me, and I will do my best to help you get the resources you need to be successful, come what may this semester. In return, I ask that all students to abide by university policies\u2014in the classroom, this especially means policies regarding masking . As long as there is a mandatory mask policy in place I am requesting that there be no eating and drinking in class (I know\u2014it\u2019s close to dinner time\u2026 but this includes snacks). I will be offering a 15 minute break during class - during which time students can eat outside of the classroom. These COVD-related policies will be reiterated later in the syllabus, but I am putting this here for visibility: If you wake up feeling ill, please stay home . You\u2019ll see that our attendance policy this semester is flexible, and should it be necessary, there will be opportunities to attend class virtually. If you are sick and you email me and let me know, we will work together to make sure you are staying current with the course content.","title":"The Continuing Impact of COVID on our Classroom Community"},{"location":"syllabus/#course-description-texts","text":"","title":"Course Description &amp; Texts"},{"location":"syllabus/#course-communication","text":"","title":"Course Communication"},{"location":"syllabus/#course-structure","text":"","title":"Course Structure"},{"location":"syllabus/#course-modality","text":"This is an in-person course that will combine synchronous and asynchronous elements, meaning that we will meet together in person at designated a time each week, and the rest of the week\u2019s activities and discussions will be completed according to your own schedule via Ed Discussions . All important due dates will be listed on the Course Schedule . All work will be submitted via Ed Discussions (for discussions/quizzes) or Blackboard (for assignments) unless otherwise noted by the instructor. Note in the unlikely event that we need to pivot to online learning during the semester, I have a contingency plan for this that is detailed the course contingencies section of the syllabus.","title":"Course Modality"},{"location":"syllabus/#readings","text":"There will be reference materials and readings that accompany various lectures. All readings are listed in the Course Schedule . Material covered in the readings may appear in the midterm and final exams. In general, I suggest reading relevant material before class meetings. The lectures may not cover all material from the readings and will often include material not found in the readings. So both reading and attending are important to your success in this class.","title":"Readings"},{"location":"syllabus/#course-evaluation-assignments","text":"","title":"Course Evaluation &amp; Assignments"},{"location":"syllabus/#grading","text":"","title":"Grading"},{"location":"syllabus/#assignments-exams","text":"","title":"Assignments &amp; Exams"},{"location":"syllabus/#assignment-due-dates","text":"All Assignments are due by the time class begins (4:30pm) on the due date indicated on the Course Schedule .","title":"Assignment Due Dates"},{"location":"syllabus/#late-policy-makeups","text":"Unless arrangements are worked out in advance, missed tests cannot be made up. For assignments, 10% will be deducted for late HW assignments turned within 24 hours of the due date, and 20% will be deducted for late HW assignments turned in after 48 hours. Assignments submitted more than 48 hours late will receive a zero. I understand that we are still operating under extraordinary circumstances this semester. If you become ill, if you have a family emergency, or if something else happens that prevents you from completing work on time (either assignments or exams), please communicate with Dr. Moran. We will devise a plan to help you complete work on an altered schedule.","title":"Late Policy &amp; Makeups"},{"location":"syllabus/#course-logistics","text":"","title":"Course Logistics"},{"location":"syllabus/#technology-requirements","text":"Activities and assignments in this course will regularly use the Ed Discussions learning system. Students are required to have regular, reliable access to a computer with an updated operating system (recommended: Windows 10 or Mac OSX 10.13 or higher) and a stable broadband Internet connection (cable modem, DSL, satellite broadband, etc., with at least a consistent 1.5 Mbps [megabits per second] download speed or higher. You can check your speed settings using this speed test .","title":"Technology Requirements"},{"location":"syllabus/#classroom-environment","text":"My goal is to facilitate a positive, supportive, and interactive learning environment that fosters respect for people across identities. In this class, I welcome and value individuals and their differences across race, economic status, gender expression and identity, sex, sexual orientation, ethnicity, national origin, first language, religion, age, and ability. It is this diversity that will enrich our discussions about designing effective user interfaces for all . Please reference the Mason Diversity Statement for more on the University\u2019s commitment to diversity and inclusion.","title":"Classroom Environment"},{"location":"syllabus/#gender-identity-and-pronoun-use","text":"If you wish, please share your name and gender pronouns with Dr. Moran and how best to address you in class and via email. I use he/him/his for myself and you may address me as Dr. or Professor Moran.","title":"Gender Identity and Pronoun Use"},{"location":"syllabus/#campus-closure","text":"If the campus closes or class is canceled due to weather or any other concern, please check Piazza for updates on how to continue learning and information about any changes to events or assignments.","title":"Campus Closure"},{"location":"syllabus/#course-contingencies","text":"Given the continuing impact of COVID-19, particularly the recent Delta variant of the virus, there is real (although hopefully unlikely) chance that we may need to switch to virtual instruction at some point in the semester. With this mind, I have in place a contingency plan for this shift to virtual instruction.","title":"Course Contingencies"},{"location":"syllabus/#course-lecture-modality","text":"Should we need to move online for any reason, we will use the Zoom web-conferencing software for lectures and in-class activities. Classes will still take place at their regularly scheduled time on Tuesdays from 4:30pm-7:10pm, although via Zoom instead of in the class room. In the event of shift to virtual learning, all instructor and TA office hours will also be online. In addition to the requirements above, students are required to have a device with a functional camera and microphone. In an emergency, you can connect through a telephone call, but video connection is the expected norm.","title":"Course Lecture Modality"},{"location":"syllabus/#changes-to-course-assignments-exams","text":"In the event that a shift to online learning is necessary, all homework assignments will remain unchanged. However, the midterm and final exam will change to a take-home version with short essay and programming questions that must be completed over a 24 or 48 hour period.","title":"Changes to Course Assignments &amp; Exams"},{"location":"syllabus/#university-policies","text":"","title":"University Policies"},{"location":"week-1-lecture-video/","text":"1u0dT/6pacI32SWomJXTwg==;Udji+QkfE97QEaRvrMWVo5SatAak3D9O3ulcn5jM0ioTwKBWtOr8XIGTORbhvFHe0zFTXWU2McWAY1W/GUyvyJlsi2WHB8gU4DZQ5/LOpRFwOpSlQlWcfi1ofRRRuYAouUDpKPNX7NdfqdS8i0GETWsldbrXT/iNyJ6h886pvgbugVCpQ0T2EjS1xhuc64FpznZMc5RdibTP4+4nuxVGegle72ITQZr04NDZMZxxiRKfBoG/KgsBztXdkcyCPHvtKibO0+gtDg0OjvyT1ej0vacYt4mGjS6iKy7FZtpDr8Dy4pdOIqHUlIb42LYEfVvCCYGO6sk0kUiKJ9Oi9KyQrc0dNFa30jZRpve9jGD79u3FrRAoEFnzndFA2UTzKbeiNMm2ajaN5bJ5wVxWA9GzR6VCT7lzXYIU+RogVDC1Qn7c+jRsoShYgy8V0YJ3beteHkMpP5KIKKf6YwwaEwI8LnziS5WxzhhhdNBHBmGS6p+yM9HN0k9U0tp+9IyuYZ+z226fXgVPgdOtbx12SK3HCYaO3s1ZUDmsKZj57z1D98tV2gXZW7JoU9p6dz+2011Si0slu80dpI5hXPuSlH2auU3v8N+sUuqw8oLAD5DZ+halSRYGah8Bt1THIoOkqaMW;^ This Content is Password Protected This course content is password protected. Please enter the password provided by the instructor. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg'); var node = document.createTextNode('Invalid Password'); decrypt_msg.appendChild(node); var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } }; password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected]Week 1 lecture video"},{"location":"week-2-lecture-video/","text":"/M2DBGhJTkdlmD4/7gnsZw==;IsrYRXuX/o+5fsSY86FlE4p8b0EuKsMvkpaf5iyuaDW03Z48XJF0uHNymEh/BL5sYXpODRkO1AKz6sDtog2QyH+yEHXtuwnqBQGk/Togu2U5P0S0pltLKeC99HLEydbCXotBOaIfFnrJoOkVpPZ/wpEonKcuBuj+JDoGeHgqd7DjmWFyBwzjpu275tBu5GEW+iGlG7pfPP5bAupo/iGXSRFuBMWDWcSelFjfkFcC1fXTdmPvFkTMUdvEWKnSh+slwNOwIyNV+bVfXKh+RXoI83BWwLmPkFT/LOr88iM7msCglMG4+kcgQLapU4gmsjrvKjp98yOkQpcf3Csf4esWhTzHMKYLHuX2tswg9cL+v9s1aFX0grRZ9Vst+QExMHZhnMMA1VIptkc8JwwkAaiLG1Qr1tJcS6SDsQ1V8MNz4EcfV8gay6iACAtRJTgaStxJxTfNPQEPsqjtnjDaKOxvCCPoKGWSfrfUIcpAyDKgCG7PWVyz0ogebOj807b+9hLB+AvPX51tFGW7xZurOcRG59TbiaHnAcfISlzBEV0dtg54/3vFjjEVO/AG/gu3uP+wx4hfN9n1ZxzmC+LffPFEtzPHWpDg8kjpASBdH4PQdHZfIG0hgLlB2B9NwCz+ynfl;^ This Content is Password Protected This course content is password protected. Please enter the password provided by the instructor. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg'); var node = document.createTextNode('Invalid Password'); decrypt_msg.appendChild(node); var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } }; password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected]Week 2 lecture video"},{"location":"week-3-lecture-video/","text":"HivKRqUjdHtrWHjanG0ZIg==;SOcPZ1FZjewPTbmu9PLUUvkqTtPfe2cmg2tskvWW01DwWN8QGmJywPvGiE4+dQ+ip96Rf4ua7K0AqdH/t1S5hbyzi4h5/VFQkDsh9e8sRCPSxKRzrrcZgFkPxHn2JtmD3Vd8m/5/e+Jg1YXJDSVaqOti/qCH3K8yW2YgV0LL5J7XxPQpHGTyZRM/1+KbUYY7udW6ev8eVowJTuNI2F9aXj2Jd3O5B/xiVHoswhhTCMd/J7f8fXHe7Qe2O+8KHyk8/tAZC1tTBmVgvYEtKhTmG5KMP54DUyxjDkA7VvqJbbRuhrIaFH9OeWQheZTsY0ShnIhKzhnrW/B5C19UNYCWz9tKMhu+QtRPqfCzKBkO/CuhT34OdYoaHJGg8QTsX7UGxEJkpY5W4Rq2iswXz1KCxBJZpQBurNiq677EiHUj5UOHfz0E4PVsVg/EyUdPyKKdwwCUFsBUae4a9VVLQLP1Uugms5vQnOEPy81c9MWfsZ2Ba6RTEtObRJzdbvF5J5QOwjdU01sShD1uyUw1W5gwq/ePMXt8LWMG/mnmanp5rYXiYS2JQYic7Kg1cDJe+UuLHZJmh1duK31Q2co3NiAercDj4qYfDNW46827Lu+ljw+oqGmldRmILkcUTzlmMNv6;^ This Content is Password Protected This course content is password protected. Please enter the password provided by the instructor. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg'); var node = document.createTextNode('Invalid Password'); decrypt_msg.appendChild(node); var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } }; password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected]Week 3 lecture video"},{"location":"week-4-lecture-video/","text":"3o4vS7nJxQi8hydn12Cj/Q==;YLeHy75ewhoPn3muC6gZPVfMbvc00Th6qm8WbBogAYhkknznJXZH5nQ3r2mffst6p75XP2Uv8LhCw+pB2TpxxrmqVuGQsfqL1dWNjAsnNHE4Hu1OPHs0ESMQhWN2CEqnzmukl+dnaHMyajtCIJGCLAxHn/i90mtUOoyfO/kWdxwkgNnkPHmoHhbbdprDprhiEwrMK217rldG2jjtdfYKRx3D+o1ko7rLcUNtgNl827rszBjLYfAWQARVA3vgyY8E++z0ba9jqbwSZstssnhDw30HrU18gX2kdq8v/N50KnB8L0dGLaB+ttUGm67XggTEdjc3E8nNzUsm1RsvL6Xa70GefMYFotVQ7Ow7Rd8hYDOqNaWtLuGCSxBoPYMU3a0qYJhAaWxcaz1ov+TE20YDMgf1iQAXA7VSPMLM0CV4d2RlJ7auXT/ufCHBgDR4xTa0Moqi4DUDV6dUWF43vIhUFuGALXU/K3A4Ad6qyYF6cuz23X746Bz3RDaP4BUFgpq5jLHHuFxx+3jVcZXxD1fWDU8OTnpyctIqCXx4k9aVOFF2JoX9dQfneOHecGolSkHGf5vMlCtKLKQjP4Jh6j6/BDBEDqr+CNZJEifTOzGE5u/3HzSLgVUpCnyD3TS9Se8W;^ This Content is Password Protected This course content is password protected. Please enter the password provided by the instructor. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg'); var node = document.createTextNode('Invalid Password'); decrypt_msg.appendChild(node); var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } }; password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected]Week 4 lecture video"},{"location":"zoom/","text":"Course Meeting Times Class Hours: Wednesdays, 4:30pm-7:10pm Class Room: Remote Instruction via Zoom - Zoom Link (Requires GMU Zoom Account) .center { display: block; margin-left: auto; margin-right: auto; } Click Here to Join the Zoom Meeting Setting up Zoom In order to protect the privacy of our class meetings, students must use their GMU Zoom account to join the class meetings. In order to attend the class, you must sign in with your GMU email address. Note, that our zoom meetings will require the Zoom desktop client on Mac or PC, or on an iOS or Android device, you will NOT be able to join the class meetings using the Zoom web app in your browser. You can download the latest Zoom client from this link . This is an online course that will combine synchronous and asynchronous elements, meaning that we will meet together on Zoom at designated a time each week, and the rest of the week\u2019s activities and discussions will be completed according to your own schedule via Piazza. All important due dates will be listed on the Course Schedule . All work will be submitted via Piazza (for discussions) or Blackboard (for the course project) unless otherwise noted by the instructor. Virtual Lecture Format Given that our course will be virtual this Fall, and that we are scheduled to meet for over 2.5 hours, lectures in this course will be dynamic in nature. I envision that for most classes lectures will generally only occupy about 1/2 of the class time. It is my belief that lectures longer than this become counterproductive in this virtual format. The remainder for each class will be utilized either for (1) interactive group activities (2) will allow time for collaboratively working on the course project, or (3) will be reserved for tech talks. We will utilize the Breakout Room feature of Zoom in order to conduct interactive sessions. Virtual Class Etiquette Given that our class meetings will be virtual, it also means we have to be more mindful and considerate so that we can create a fun but conducive learning environment for everyone. To foster this environment, I ask the following: Microphones are muted during lecture. If there is a question, please feel free to raise it in the chat window or raise your hand such that I can call on you at the next opportune time. If you choose not to have your camera turned on, please have a photo of yourself on your Zoom profile. It helps me to teach to your lovely faces, rather than black squares with names in them . Group in-class assignments will be done in breakout rooms. This is a time to have your microphones unmuted and to engage with your fellow classmates (and of course counts towards your participation grade). Reactions, comments, and feedback are welcome (if not encouraged) as you feel moved by my lectures or questions raised by other students! I want class to be fun and engaging. But please keep it cordial and respectful. Course Recordings and Privacy All of our synchronous meetings in this class will be recorded to provide necessary information for students in this class. Recordings will be posted on the course website (for lectures), or Blackboard (for Tech Talks). All course materials posted to Blackboard, Piazza or other course sites are private; by federal law, any materials that identify specific students (via their name, voice, or image) must not be shared with anyone not enrolled in this class. Video recordings of class meetings that include audio or visual information from other students are private and must not be shared Live Video Conference Meetings (e.g. Collaborate or Zoom) that include audio or visual information from other students must be viewed privately and not shared with others in your household","title":"Zoom"},{"location":"zoom/#course-meeting-times","text":"Class Hours: Wednesdays, 4:30pm-7:10pm Class Room: Remote Instruction via Zoom - Zoom Link (Requires GMU Zoom Account) .center { display: block; margin-left: auto; margin-right: auto; } Click Here to Join the Zoom Meeting","title":"Course Meeting Times"}]}